<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.BlogMapper">

    <insert id="addBlog" parameterType="pojo.Blog">
        INSERT INTO mybatis.blog (id, title, author, create_time, views)
        VALUES (#{id},#{title},#{author},#{createTime},#{views});
    </insert>

    <!--SQL片段-->
    <!--
        有时候可能某个 sql 语句我们用的特别多，为了增加代码的重用性，简化代码，
        我们需要将这些代码抽取出来，然后使用时直接调用。
        注意：
             ①、最好基于 单表来定义 sql 片段，提高片段的可重用性
             ②、在 sql 片段中不要包括 where
    -->
    <sql id="if-title-author">
        <if test="title != null">
            title = #{title}
        </if>
        <if test="author != null">
            and author = #{author}
        </if>
    </sql>

    <!--IF语句-->
    <!--需求1：
        根据作者名字和博客名字来查询博客！
        如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询
        select * from blog where title = #{title} and author = #{author}
    -->
    <select id="selectBlogIf" resultType="pojo.Blog" parameterType="map">
        SELECT * FROM mybatis.blog
        <where>
            <!-- 引用 sql 片段，如果refid 指定的不在本文件中，那么需要在前面加上 namespace -->
            <!-- 在这里还可以引用其他的 sql 片段 -->
            <include refid="if-title-author"></include>
        </where>
    </select>

    <!--注意set是用的逗号隔开-->
    <update id="updateBlogSet" parameterType="map">
        UPDATE mybatis.blog
        <set>
            <if test="title != null">
                title = #{title}
            </if>
            <if test="author != null">
                , author = #{author}
            </if>
        </set>
        WHERE id=#{id};
    </update>

    <!--choose语句-->
    <select id="selectBlogChoose" resultType="pojo.Blog" parameterType="map">
        SELECT * FROM mybatis.blog
        <where>
            <choose>
                <when test="title != null">
                    title = #{title}
                </when>
                <when test="author != null">
                    AND author = #{author}
                </when>
                <otherwise>
                    AND views = #{views}
                </otherwise>
            </choose>
        </where>
    </select>

    <select id="selectBlogForeach" resultType="pojo.Blog" parameterType="map">
        SELECT * FROM mybatis.blog
        <where>
            <!--
               collection:指定输入对象中的集合属性
               item:每次遍历生成的对象
               open:开始遍历时的拼接字符串
               close:结束时拼接的字符串
               separator:遍历对象之间需要拼接的字符串
               select * from blog where 1=1 and (id=1 or id=2 or id=3)
             -->
            <foreach collection="authors" item="author" open="and (" close=")" separator="or">
                author=#{author}
            </foreach>
        </where>
    </select>
</mapper>