<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.UserMapper">
    
    <!--查询所有的用户-->
    <select id="selectUser" resultType="pojo.User">
        SELECT * FROM mybatis.user;
    </select>
    
    <!--根据传参条件查询-->
    <select id="selectParamsUser" resultType="pojo.User">
        SELECT * FROM mybatis.user WHERE id=#{id};
    </select>
    
    <!--模糊查询LIKE-->
    <!--方法一：直接使用字段LIKE，在Java代码中添加sql通配符。【不推荐】-->
    <!--<select id="selectLikeUser" resultType="pojo.User">-->
    <!--    SELECT * FROM mybatis.user WHERE username LIKE #{username};-->
    <!--</select>-->
    <!--方法二：在配置文件配置好通配符-->
    <select id="selectLikeUser" resultType="pojo.User">
        SELECT * FROM mybatis.user WHERE username LIKE '%'#{username}'%';
    </select>
    
    <!--万能Map查询-->
    <select id="selectMapUser" parameterType="map" resultType="map">
        SELECT * FROM mybatis.user WHERE username=#{username} AND password=#{password};
    </select>
    
    <!--分页查询，利用LIMIT实现在SQL中分页-->
    <select id="selectLimitUser" parameterType="map" resultType="pojo.User">
        SELECT * FROM mybatis.user LIMIT #{startIndex}, #{pageSize};
    </select>
    
    <!--分页查询，利用RowBounds在Java代码层面实现-->
    <select id="selectRowBoundsUser" resultType="pojo.User">
        SELECT * FROM mybatis.user;
    </select>
    
    <!--增加新用户-->
    <insert id="addUser" parameterType="pojo.User">
        INSERT INTO mybatis.user(id, username, password) VALUES(#{id}, #{username}, #{password}); 
    </insert>
    
    <!--更新用户-->
    <update id="updateUser" parameterType="pojo.User">
        UPDATE mybatis.user SET username=#{username}, password=#{password} WHERE id=#{id};
    </update>
    
    <delete id="deleteUser" parameterType="pojo.User">
        DELETE FROM mybatis.user WHERE id=#{id};
    </delete>
 </mapper>
